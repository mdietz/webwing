<!doctype html>
<html>
<head>
  <title>{{ title }}</title>
  {% if compiled_css %}
    <link rel="stylesheet" href="{{ compiled_css|safe }}"></link>
  {% else %}
    {% for stylus_file in stylus_files %}
    <link rel="stylesheet" href="{{ asset_url(stylus_file + ".styl")|safe }}"></link>
    {% endfor %}
  {% endif %}
  {% if compiled_vendor_js %}
  <script src="{{ compiled_vendor_js }}"></script>
  {% else %}
    {% for vendor_js in vendor_js_files %}
    <script src="/static/vendor/js/{{ vendor_js|safe }}"></script>
    {% endfor %}
  {% endif %}
  {% if debug %}
  <script src="/static/vendor/js/livecss.js"></script>
  {% endif %}
  {% if compiled_js %}
    <script src="{{ compiled_js|safe }}"></script>
  {% else %}
    {% for coffee_file in coffee_files %}
    <script src="{{ asset_url(coffee_file + ".coffee")|safe }}"></script>
    {% endfor %}
  {% endif %}
  {% for template_id, template_content in mustache_templates %}
  <script id="{{ template_id }}" type="text/x-mustache-template">
    {{ template_content|safe }}
  </script>
  {% endfor %}
  <style type="text/css">
    body {
      background-color: #000000;
      margin: 0px;
      overflow: hidden;
    }
  </style>
  <script charset="utf-8">
    $(function() {

    var camera, scene, renderer, loader;
    var tieIn, xwing;
    var FlightControls;
    var rotDelta = 0.04;
    var laserContainer;
    var laserContainer2;
    var camControls;
    var firing = false;
    var laserDist = 0;
    var tween1, tween2;

    init();

    function init() {

        camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 100000 );
        camera.position.z = 300;
        camera.position.y = 0;
        camera.position.x = 0;

        scene = new THREE.Scene();
        window.scene = scene;

        var ambient = new THREE.AmbientLight( 0x111111 );
        scene.add( ambient );

        var directionalLight = new THREE.DirectionalLight( 0x777777 );
        directionalLight.position.set( 50, 150, 150 );
        scene.add( directionalLight );

        //var light = new THREE.PointLight(0x7777777);
        //light.position.set(-50, 150, -150);
        //scene.add(light);

        // Particles (stars)
        var geometry = new THREE.Geometry();

        for (i = 0; i < 2000; i++) {
          var vector = new THREE.Vector3( 1000 - (Math.random() * 2000), 1000 - (Math.random() * 2000), 1000 - (Math.random() * 2000));
          geometry.vertices.push( vector );
        }

        var particleImage = THREE.ImageUtils.loadTexture( "static/img/star.png" );
        var particleMaterial = new THREE.ParticleBasicMaterial({size: 10, map: particleImage, opacity: 1.0, transparent: false, depthTest: true, blending: THREE.NormalBlending} );

        particles = new THREE.ParticleSystem( geometry, particleMaterial );

        //scene.add( particles );

        map_material = new THREE.MeshBasicMaterial({
          map: THREE.ImageUtils.loadTexture('static/img/starmap_2048.png'),
          opacity: 0.5,
          blending: THREE.AdditiveBlending
        }),
        geometry = new THREE.SphereGeometry(5000,32,16);

        var starsphere = new THREE.Mesh(geometry, map_material);
        starsphere.flipsided = true;
        starsphere.scale.x = -1;

        scene.add(starsphere);

        xwing = new XWing("xwing", new THREE.Vector3(-100,0,0), new THREE.Vector3(0,0,0))
        tieIn = new TieIn("tie", new THREE.Vector3(0,0,-300), new THREE.Vector3(0,0,0))

        xwing.load(function(loadedShip){
          console.log(xwing);
          //xwing.model.add(camera);
          //camera.rotation.set(0, Math.PI, 0);
          //camera.lookAt( xwing.model.position );
          addThrust();
          addShield();
          xwing.model.useQuaternion = true
          window.FlightControls.init(xwing);
          tieIn.load(function(loadedShip2){
            animate();
          });
        });

        renderer = new THREE.WebGLRenderer({'antialias':true});
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.sortObjects = false;

        camControls = new THREE.TrackballControls( camera );
        camControls.target.set(0,0,0)

        document.body.appendChild( renderer.domElement );

    }

    function addThrust() {
      // Thrust
        var thrustImage = THREE.ImageUtils.loadTexture( "static/img/thrust.png" );
        var scale = 2.0;

        var material = new THREE.SpriteMaterial( {map: thrustImage, useScreenCoordinates: false} );

        var thrust0 = new THREE.Sprite( material);
        thrust0.scale.set(scale, scale, scale);
        thrust0.position.set( 2.15, 2.5, -11 );
        thrust0.blending = THREE.AdditiveBlending;
        xwing.model.add( thrust0 );

        var thrust1 = new THREE.Sprite( material);
        thrust1.scale.set(scale, scale, scale);
        thrust1.position.set( -2.15, 2.5, -11 );
        thrust1.blending = THREE.AdditiveBlending;
        xwing.model.add( thrust1 );

        var thrust2 =  new THREE.Sprite( material);
        thrust2.scale.set(scale, scale, scale);
        thrust2.position.set( 2.2, -2.3, -11 );
        thrust2.blending = THREE.AdditiveBlending;
        xwing.model.add( thrust2 );

        var thrust3 =  new THREE.Sprite( material);
        thrust3.scale.set(scale, scale, scale);
        thrust3.position.set( -2.2, -2.3, -11 );
        thrust3.blending = THREE.AdditiveBlending;
        xwing.model.add( thrust3 );
    }

    function addShield() {
      var shield = new THREE.SphereGeometry( 15, 12, 12 );

    // params
    var SHADING = THREE.SmoothShading;
    //var SHADING = THREE.FlatShading;
    var OPACITY = 0.2;

    var color = 0x0000ff;

    var material2Back = new THREE.MeshLambertMaterial( {
        color: color,
        ambient: color,
        side: THREE.BackSide,
        shading: SHADING,
        transparent: true,
        opacity: OPACITY,
        //depthTest: false
    } );

    var material2Front = new THREE.MeshLambertMaterial( {
        color: color,
        ambient: color,
        side: THREE.FrontSide,
        shading: SHADING,
        transparent: true,
        opacity: OPACITY,
        depthTest:false
    } );

        // mesh
        mesh = new THREE.Mesh( shield, material2Back );
        mesh.scale.set(1.0, 0.5, 1.0)
         xwing.model.add(mesh);

        // mesh
        mesh = new THREE.Mesh( shield, material2Front );
        mesh.scale.set(1.0, 0.5, 1.0)
         xwing.model.add(mesh);
    }

    function animate() {
        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );
        // key control
        if (window.FlightControls.leftIsDown) {
            //Util.rotObj(tieIn, Util.yAxis, rotDelta);
            Util.rotObj(xwing.model, Util.yAxis, rotDelta);
            //tieIn.rotation.y += rotDelta;
            xwing.model.rotation.y += rotDelta;
        }
        if (window.FlightControls.rightIsDown) {
            //Util.rotObj(tieIn, Util.yAxis, -rotDelta);
            Util.rotObj(xwing.model, Util.yAxis, -rotDelta);
            //tieIn.rotation.y -= rotDelta;
            xwing.model.rotation.y -= rotDelta;
        }
        if (window.FlightControls.upIsDown) {
            //Util.rotObj(tieIn, Util.xAxis, rotDelta);
            Util.rotObj(xwing.model, Util.xAxis, rotDelta);
            //tieIn.rotation.x -= rotDelta;
            xwing.model.rotation.x -= rotDelta;
        }
        if (window.FlightControls.downIsDown) {
            //Util.rotObj(tieIn, Util.xAxis, -rotDelta);
            Util.rotObj(xwing.model, Util.xAxis, -rotDelta);
            //tieIn.rotation.x += rotDelta;
            xwing.model.rotation.x += rotDelta;
        }
        if (window.FlightControls.rollRight) {
            //Util.rotObj(tieIn, Util.zAxis, rotDelta);
            Util.rotObj(xwing.model, Util.zAxis, rotDelta);
            //tieIn.rotation.z += rotDelta;
            xwing.model.rotation.z += rotDelta;
        }
        if (window.FlightControls.rollLeft) {
            //Util.rotObj(tieIn, Util.zAxis, -rotDelta);
            Util.rotObj(xwing.model, Util.zAxis, -rotDelta);
            //tieIn.rotation.z -= rotDelta;
            xwing.model.rotation.z -= rotDelta;
        }
        if (!firing){
            //laserDist = 0;
            //for (var i in laserContainer.children) {
            //    laserContainer.children[i].visible = false;
            //}

            //for (var i in laserContainer2.children) {
            //    laserContainer2.children[i].visible = false;
            //}
            xwing.fireQuad();
            tieIn.fireQuad();
            firing = true;
        } else {

        }

        //tieIn.rotation.x += rotDelta;
        //tieIn.rotation.z += rotDelta;
        //tieIn2.rotation.y += rotDelta;
        //xwing.rotation.z += rotDelta;

        TWEEN.update();
        camControls.update();

        renderer.render( scene, camera );

    }
    })
  </script>
</head>
<body>
</body>
</html>
