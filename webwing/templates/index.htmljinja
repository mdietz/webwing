<!doctype html>
<html>
<head>
  <title>{{ title }}</title>
  {% if compiled_css %}
    <link rel="stylesheet" href="{{ compiled_css|safe }}"></link>
  {% else %}
    {% for stylus_file in stylus_files %}
    <link rel="stylesheet" href="{{ asset_url(stylus_file + ".styl")|safe }}"></link>
    {% endfor %}
  {% endif %}
  {% if compiled_vendor_js %}
  <script src="{{ compiled_vendor_js }}"></script>
  {% else %}
    {% for vendor_js in vendor_js_files %}
    <script src="/static/vendor/js/{{ vendor_js|safe }}"></script>
    {% endfor %}
  {% endif %}
  {% if debug %}
  <script src="/static/vendor/js/livecss.js"></script>
  {% endif %}
  {% if compiled_js %}
    <script src="{{ compiled_js|safe }}"></script>
  {% else %}
    {% for coffee_file in coffee_files %}
    <script src="{{ asset_url(coffee_file + ".coffee")|safe }}"></script>
    {% endfor %}
  {% endif %}
  {% for template_id, template_content in mustache_templates %}
  <script id="{{ template_id }}" type="text/x-mustache-template">
    {{ template_content|safe }}
  </script>
  {% endfor %}
  {% for shader, shader_content in shaders %}
    {{ shader_content|safe }}
  {% endfor %}
  <script charset="utf-8">
    $(function() {

    var camera, scene, renderer, loader;
    var corvette, xwing;
    var windowWidth = window.innerWidth;
    var windowHeight = window.innerHeight;
    var FlightControls;
    var camControls;
    var stats;
    var firing = false;
    window.ships = [];
    window.bounds = [];
    var start = Date.now();
    var mesh, material;
    var oldTime = new Date().getTime();

    var views = [
        {
          left: 0,
          bottom: 0,
          center: false,
          width: 1,
          height: 1,
          eye: [ 0, 0, 0 ],
          up: [ 0, 1, 0 ],
          depth: 200000,
          fov: 60,
          background: { r: 0.0, g: 0.0, b: 0.0, a: 1 },
          updateCamera: function ( camera, scene ) {
          }
        }/*,
        {
          left: 0,
          bottom: .1,
          center: true,
          width: .2,
          height: .3,
          eye: [ 0, 0, 0 ],
          up: [ 0, 1, 0 ],
          depth: 2000,
          fov: 45,
          background: { r: 0.2, g: 0.2, b: 0.2, a: 1 },
          updateCamera: function ( camera, scene ) {
            camera.position = window.FlightControls.playerShip.targets[0].model.position.clone();
            camera.lookAt( window.FlightControls.playerShip.model.position.clone() );
            camera.updateMatrix();
            camera.translateZ(-1*window.FlightControls.playerShip.targets[0].viewDist);
            camera.lookAt( window.FlightControls.playerShip.targets[0].model.position.clone() );
          }
        }*/
      ];

    init();

    function init() {

        window.Sound.init();
        //window.Cockpit.init();

        for (var ii =  0; ii < views.length; ++ii ) {

          var view = views[ii];
          camera = new THREE.PerspectiveCamera( view.fov, window.innerWidth / window.innerHeight, 1, view.depth );
          camera.position.x = view.eye[ 0 ];
          camera.position.y = view.eye[ 1 ];
          camera.position.z = view.eye[ 2 ];
          camera.up.x = view.up[ 0 ];
          camera.up.y = view.up[ 1 ];
          camera.up.z = view.up[ 2 ];
          view.camera = camera;
        }

        scene = new THREE.Scene();
        window.scene = scene;

        var ambient = new THREE.AmbientLight( 0x333333 );
        scene.add( ambient );

        var directionalLight = new THREE.DirectionalLight( 0xaaaaaa );
        directionalLight.position.set( 0, 1, -1 );
        scene.add( directionalLight );

        /*map_material = new THREE.MeshBasicMaterial({
          map: THREE.ImageUtils.loadTexture('static/img/starmap_2048.png'),
          opacity: 1.0,
          blending: THREE.AdditiveBlending
        }),
        geometry = new THREE.SphereGeometry(100000,32,16);

        var starsphere = new THREE.Mesh(geometry, map_material);
        starsphere.flipsided = true;
        starsphere.scale.x = -1;

        scene.add(starsphere);*/

        window.time = { type: "f", value: 1.0 };

        //var simplex_vertex = document.getElementById( 'simplex_vertex_shader' ).textContent
        //var simplex_fragment = document.getElementById( 'simplex_fragment_shader' ).textContent

        //var simplexMaterial = new THREE.ShaderMaterial( { uniforms: window.shieldUniforms, vertexShader: simplex_vertex, fragmentShader: simplex_fragment })

        //var simplexSphere = new THREE.Mesh( new THREE.SphereGeometry( 100, 12, 12), simplexMaterial );
        //simplexSphere.position.set(0,0, 400);
        // add it to the scene
        //scene.add( simplexSphere );

        var url = "static/img/starfield.png";
        var urls = [ url, url, url, url, url, url ];
        var textureCube = THREE.ImageUtils.loadTextureCube( urls, new THREE.CubeRefractionMapping() );
        window.textureCube = textureCube;

        var cubeShader = THREE.ShaderLib["cube"];
        var cubeUniforms = THREE.UniformsUtils.clone( cubeShader.uniforms );
        cubeUniforms['tCube'].value = textureCube;
        var cubeMaterial = new THREE.ShaderMaterial({
            fragmentShader: cubeShader.fragmentShader,
            vertexShader: cubeShader.vertexShader,
            uniforms: cubeUniforms,
            side: THREE.BackSide
        });

        // build the skybox Mesh 
        var skyboxMesh = new THREE.Mesh( new THREE.CubeGeometry( 100000, 100000, 100000, 1, 1, 1), cubeMaterial );
        // add it to the scene
        scene.add( skyboxMesh );

        xwing = new XWing("xwing", new THREE.Vector3(0,0,0), new THREE.Vector3(0,0,0))
        corvette = new Corvette("corvette", new THREE.Vector3(100,-50,200), new THREE.Vector3(0,0,0))
        sd = new SD("sd", new THREE.Vector3(0,0,6000), new THREE.Vector3(0,0,0))
        tie1 = new TieIn("tie1", new THREE.Vector3(100,-100,4000), new THREE.Vector3(0,0,0))
        //tie2 = new TieIn("tie2", new THREE.Vector3(-100,100,4000), new THREE.Vector3(0,0,0))
        //tie3 = new TieIn("tie3", new THREE.Vector3(100,100,4000), new THREE.Vector3(0,0,0))
        //tie4 = new TieIn("tie4", new THREE.Vector3(-100,-100,4000), new THREE.Vector3(0,0,0))
        //tie5 = new TieIn("tie5", new THREE.Vector3(200,-200,4000), new THREE.Vector3(0,0,0))
        //tie6 = new TieIn("tie6", new THREE.Vector3(-200,200,4000), new THREE.Vector3(0,0,0))
        //tie7 = new TieIn("tie7", new THREE.Vector3(200,200,4000), new THREE.Vector3(0,0,0))
        //tie8 = new TieIn("tie8", new THREE.Vector3(-200,-200,4000), new THREE.Vector3(0,0,0))

        xwing.load(function(loadedShip){
          console.log(xwing);
          xwing.model.add(views[0].camera);
          views[0].camera.rotation.set(0, Math.PI, 0);
          //camera.lookAt( xwing.model.position );
          window.FlightControls.init(xwing);
          window.ships.push(xwing);
          xwing.model.children[0].traverse(function (node) {
            node.visible = false;
          });
          corvette.load(function(loadedShip2){
            console.log(corvette);
            //Util.rotObj(corvette.model, Util.yAxis, Math.PI/2);
            window.ships.push(corvette);
            sd.load(function(loadedShip3){
              window.ships.push(sd);
              Util.rotObj(sd.model, Util.yAxis, Math.PI/2);
              tie1.load(function(loadedShip4){
                Util.rotObj(tie1.model, Util.yAxis, Math.PI);
                window.ships.push(tie1);
                animate();
                /*tie2.load(function(loadedShip5){
                  Util.rotObj(tie2.model, Util.yAxis, Math.PI);
                  window.ships.push(tie2);
                  tie3.load(function(loadedShip6){
                    Util.rotObj(tie3.model, Util.yAxis, Math.PI);
                    window.ships.push(tie3);
                    tie4.load(function(loadedShip7){
                      Util.rotObj(tie4.model, Util.yAxis, Math.PI);
                      window.ships.push(tie4);
                      tie5.load(function(loadedShip8){
                        Util.rotObj(tie5.model, Util.yAxis, Math.PI);
                        window.ships.push(tie5);
                        tie6.load(function(loadedShip9){
                        Util.rotObj(tie6.model, Util.yAxis, Math.PI);
                        window.ships.push(tie6);
                        tie7.load(function(loadedShip10){
                        Util.rotObj(tie7.model, Util.yAxis, Math.PI);
                        window.ships.push(tie7);
                        tie8.load(function(loadedShip11){
                        Util.rotObj(tie8.model, Util.yAxis, Math.PI);
                        window.ships.push(tie8);
                        animate();
                      });
                      });
                      });
                      });
                    });
                 });
                });*/
              });
            });
          });
        });

        /*material = new THREE.ShaderMaterial( {

                        uniforms: {
                          tExplosion: { type: "t", value: THREE.ImageUtils.loadTexture( 'static/img/explosion.png' ) },
                          time: { type: "f", value: Math.random() },
                          weight: { type: "f", value: 10.0 }
                        },
                        vertexShader: document.getElementById( 'vertexShader' ).textContent,
                        fragmentShader: document.getElementById( 'fragmentShader' ).textContent

                      } );

                      mesh = new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 5 ), material );
                      mesh.position.set(0,0,6000);
                      new TWEEN.Tween(mesh.scale)
                      .to({x: 100, y: 100, z:100}, 1000)
                      .easing(TWEEN.Easing.Linear.None)
                      .repeat(Infinity)
                      .onComplete(function() {
                        mesh.scale.set(1,1,1)
                      })
                      .start()

                      scene.add( mesh );*/

        renderer = new THREE.WebGLRenderer({'antialias':true});
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.sortObjects = false;

        //camControls = new THREE.TrackballControls( camera );
        //camControls.target.set(0,0,0);

        stats = new Stats();
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.top = '0px';

        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);

        var gui = new dat.GUI();
        var windowF = gui.addFolder('Window');
        windowF.open();
        windowF.add(window.Sound, 'toggleSound');
        windowF.add(renderer.domElement, 'webkitRequestPointerLock');
        var tie1F = gui.addFolder('Tie1');
        tie1F.add(tie1, 'autoPilot');
        tie1F.add(tie1, 'fireDouble');

        document.body.appendChild( renderer.domElement );
        document.body.appendChild( stats.domElement );

    }

    function pointerLockChange() {
      if(window.FlightControls.pointerLock == true) {
        window.FlightControls.pointerLock = false;
      }
      else {
        window.FlightControls.pointerLock = true;
      }
    }

    function updateSize() {
      if ( windowWidth != window.innerWidth || windowHeight != window.innerHeight ) {

        windowWidth  = window.innerWidth;
        windowHeight = window.innerHeight;

        renderer.setSize ( windowWidth, windowHeight );

      }
    }

    function animate() {
        updateSize();

        var time = new Date().getTime();
        var delta = ( time - oldTime );
        oldTime = time;

        window.time.value += 0.275 * delta;

        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );

        TWEEN.update();

        if (!firing){
            //xwing.fireDouble();
            //tie2.fireDouble();
            //tie3.fireDouble();
            //tie4.fireDouble();
            //tie5.fireDouble();
            //tie6.fireDouble();
            //tie7.fireDouble();
            //tie8.fireDouble();
            //corvette.addTarget(sd);
            //corvette.addTarget(tie1);
            //corvette.addTarget(tie2);
            //corvette.addTarget(tie3);
            //corvette.addTarget(tie4);
            //corvette.addTarget(tie5);
            //corvette.addTarget(tie6);
            //corvette.addTarget(tie7);
            //corvette.addTarget(tie8);
            corvette.setSpeed(100);
            xwing.addTarget(corvette);
            tie1.setAsPlayerTarget();
            tie1.addTarget(corvette);
            //tie1.autoPilot();
            //tie2.addTarget(corvette);
            //tie2.autoPilot();
            //tie3.addTarget(corvette);
            //tie3.autoPilot();
            //tie4.addTarget(corvette);
            //tie4.autoPilot();
            //tie5.addTarget(corvette);
            //tie5.autoPilot();
            //tie6.addTarget(corvette);
            //tie6.autoPilot();
            //tie7.addTarget(corvette);
            //tie7.autoPilot();
            //tie8.addTarget(corvette);
            //tie8.autoPilot();
            //sd.addTarget(xwing);
            //sd.addTarget(corvette);
            //corvette.fireDouble();
            //sd.fireSingle();
            firing = true;
        } else {

        }

        for ( var ii = 0; ii < views.length; ++ii ) {

          view = views[ii];
          camera = view.camera;

          view.updateCamera( camera, scene);

          if(view.center) {
            var left   = Math.floor( windowWidth/2 - (windowWidth*view.width)/2 );
            var bottom = Math.floor( windowHeight * view.bottom );
          } else {
            var left   = Math.floor( windowWidth  * view.left );
            var bottom = Math.floor( windowHeight * view.bottom );
          }
          var width  = Math.floor( windowWidth  * view.width );
          var height = Math.floor( windowHeight * view.height );
          renderer.setViewport( left, bottom, width, height );
          renderer.setScissor( left, bottom, width, height );
          renderer.enableScissorTest ( true );
          renderer.setClearColor( view.background, view.background.a );

          camera.aspect = width / height;
          camera.updateProjectionMatrix();

          renderer.render( scene, camera );
        }

        //material.uniforms[ 'time' ].value = .0005 * ( Date.now() - start );
        //camControls.update();

        //renderer.render( scene, camera );
        stats.update();
    }
    })
  </script>
</head>
<body>
  <div class='cockpit-overlay'>
  </div>
</body>
</html>
