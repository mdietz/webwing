<!doctype html>
<html>
<head>
  <title>{{ title }}</title>
  {% if compiled_css %}
    <link rel="stylesheet" href="{{ compiled_css|safe }}"></link>
  {% else %}
    {% for stylus_file in stylus_files %}
    <link rel="stylesheet" href="{{ asset_url(stylus_file + ".styl")|safe }}"></link>
    {% endfor %}
  {% endif %}
  {% if compiled_vendor_js %}
  <script src="{{ compiled_vendor_js }}"></script>
  {% else %}
    {% for vendor_js in vendor_js_files %}
    <script src="/static/vendor/js/{{ vendor_js|safe }}"></script>
    {% endfor %}
  {% endif %}
  {% if debug %}
  <script src="/static/vendor/js/livecss.js"></script>
  {% endif %}
  {% if compiled_js %}
    <script src="{{ compiled_js|safe }}"></script>
  {% else %}
    {% for coffee_file in coffee_files %}
    <script src="{{ asset_url(coffee_file + ".coffee")|safe }}"></script>
    {% endfor %}
  {% endif %}
  {% for template_id, template_content in mustache_templates %}
  <script id="{{ template_id }}" type="text/x-mustache-template">
    {{ template_content|safe }}
  </script>
  {% endfor %}
  <style type="text/css">
    body {
      background-color: #ffffff;
      margin: 0px;
      overflow: hidden;
    }
  </style>
  <script charset="utf-8">
    $(function() {

    var camera, scene, renderer, loader;
    var corvette, xwing;
    var FlightControls;
    var camControls;
    var firing = false;
    window.ships = [];

    init();

    function init() {

        camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 200000 );
        camera.position.z =-60;
        camera.position.y = 5;
        camera.position.x = 0;

        scene = new THREE.Scene();
        window.scene = scene;

        var ambient = new THREE.AmbientLight( 0x333333 );
        scene.add( ambient );

        var directionalLight = new THREE.DirectionalLight( 0xaaaaaa );
        directionalLight.position.set( 0, 1, -1 );
        scene.add( directionalLight );

        map_material = new THREE.MeshBasicMaterial({
          map: THREE.ImageUtils.loadTexture('static/img/starmap_2048.png'),
          opacity: 1.0,
          blending: THREE.AdditiveBlending
        }),
        geometry = new THREE.SphereGeometry(100000,32,16);

        var starsphere = new THREE.Mesh(geometry, map_material);
        starsphere.flipsided = true;
        starsphere.scale.x = -1;

        scene.add(starsphere);

        xwing = new XWing("xwing", new THREE.Vector3(0,0,0), new THREE.Vector3(0,0,0))
        corvette = new Corvette("corvette", new THREE.Vector3(5000,-500,5000), new THREE.Vector3(0,0,0))
        sd = new SD("sd", new THREE.Vector3(0,0,5000), new THREE.Vector3(0,0,0))
        tie1 = new TieIn("tie1", new THREE.Vector3(20,-20,1000), new THREE.Vector3(0,0,0))
        tie2 = new TieIn("tie2", new THREE.Vector3(-20,20,1000), new THREE.Vector3(0,0,0))
        tie3 = new TieIn("tie3", new THREE.Vector3(20,20,1000), new THREE.Vector3(0,0,0))
        tie4 = new TieIn("tie4", new THREE.Vector3(-20,-20,1000), new THREE.Vector3(0,0,0))

        xwing.load(function(loadedShip){
          console.log(xwing);
          xwing.model.add(camera);
          camera.rotation.set(0, Math.PI, 0);
          camera.lookAt( xwing.model.position );
          window.FlightControls.init(xwing);
          window.ships.push(xwing);
          corvette.load(function(loadedShip2){
            console.log(corvette);
            Util.rotObj(corvette.model, Util.yAxis, Math.PI/2);
            window.ships.push(corvette);
            sd.load(function(loadedShip3){
              window.ships.push(sd);
              tie1.load(function(loadedShip4){
                Util.rotObj(tie1.model, Util.yAxis, Math.PI);
                window.ships.push(tie1);
                tie2.load(function(loadedShip5){
                  Util.rotObj(tie2.model, Util.yAxis, Math.PI);
                  window.ships.push(tie2);
                  tie3.load(function(loadedShip6){
                    Util.rotObj(tie3.model, Util.yAxis, Math.PI);
                    window.ships.push(tie3);
                    tie4.load(function(loadedShip7){
                      Util.rotObj(tie4.model, Util.yAxis, Math.PI);
                      window.ships.push(tie4);
                      animate();
                    });
                 });
                });
              });
            });
          });
        });

        renderer = new THREE.WebGLRenderer({'antialias':false});
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.sortObjects = false;

        //camControls = new THREE.TrackballControls( camera );
        //camControls.target.set(0,0,0);

        document.body.appendChild( renderer.domElement );

    }

    function animate() {
        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );
        if (!firing){
            xwing.fireDouble();
            tie1.fireDouble();
            tie2.fireDouble();
            tie3.fireDouble();
            tie4.fireDouble();
            corvette.addTarget(sd);
            corvette.setSpeed(100);
            xwing.setTarget(tie1);
            tie1.setTarget(xwing);
            tie1.autoPilot();
            tie2.setTarget(xwing);
            tie2.autoPilot();
            tie3.setTarget(corvette);
            tie3.autoPilot();
            tie4.setTarget(corvette);
            tie4.autoPilot();
            sd.addTarget(xwing);
            sd.addTarget(tie1);
            sd.addTarget(tie2);
            sd.addTarget(tie3);
            sd.addTarget(tie4);
            sd.addTarget(corvette);
            corvette.fireDouble();
            sd.fireSingle();
            firing = true;
        } else {

        }

        TWEEN.update();
        //camControls.update();

        renderer.render( scene, camera );

    }
    })
  </script>
</head>
<body>
</body>
</html>
